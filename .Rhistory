function(x) {
json_body <- toJSON(x, auto_unbox = TRUE)
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
stop_for_status(res)
return(content(res, "parsed", "application/json"))
})
return(responses)
}
setwd("C:/Users/nhuntington-klein/OneDrive/Contract/SafeGraph/PlacekeyNotebook")
orig_df <- fread('MA_subways.csv',
select = c('safegraph_place_id',
'location_name',
'street_address',
'city',
'postal_code',
'iso_country_code',
'latitude',
'longitude'),
colClasses = c(postal_code = 'character'))
setnames(orig_df, 'safegraph_place_id', 'query_id')
toJSON(orig_df)
all_batches <- list(orig_df[1:2],orig_df[3:4])
all_batches
# if you prefer the syntax, purrr::map() would also work well here, or just a good ol' for loop
batch_payloads <- lapply(all_batches,
function(x)
list(queries = x,
options = list(strict_address_match = FALSE))) #see https://docs.placekey.io/#77042b13-ad19-423b-b117-c1ec819ae2f9
batch_payloads
url <- 'api.placekey.io/v1/placekeys'
x <- batch_payloads[[1]]
x
json_body <- toJSON(x, auto_unbox = TRUE)
json_body
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
library(requests)
install.packages('requests')
url
url <- 'https://api.placekey.io/v1/placekeys'
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
stop_for_status(res)
content(res, "parsed", "application/json")
as.data.table(content(res, "parsed", "application/json"))
batch_payloads
getPlacekeys <- function(batch_payloads, headers) {
url <- 'https://api.placekey.io/v1/placekeys'
responses <- lapply(batch_payloads,
function(x) {
json_body <- toJSON(x, auto_unbox = TRUE)
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
stop_for_status(res)
return(content(res, "parsed", "application/json"))
})
return(responses)
}
responses <- getPlacekeys(batch_payloads, headers)
responses
as.data.table(responses)
responses[[1]]
as.data.table(responses[[1]])
t(as.data.table(responses[[1]]))
getPlacekeys <- function(batch_payloads, headers) {
url <- 'https://api.placekey.io/v1/placekeys'
responses <- lapply(batch_payloads,
function(x) {
json_body <- toJSON(x, auto_unbox = TRUE)
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
stop_for_status(res)
output <- content(res, "parsed", "application/json")
# Send things back in a nice data.table format
# By default this will be one column per request, let's make it a column of IDs and a column of Placekeys
dt <- as.data.table(output)
names(dt) <- c('query_id','placekey_id')
return(dt)
})
# Bind the results from each of our batches together
responses <- rbindlist(responses)
return(responses)
}
responses <- getPlacekeys(batch_payloads, headers)
responses
getPlacekeys <- function(batch_payloads, headers) {
url <- 'https://api.placekey.io/v1/placekeys'
responses <- lapply(batch_payloads,
function(x) {
json_body <- toJSON(x, auto_unbox = TRUE)
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
stop_for_status(res)
output <- content(res, "parsed", "application/json")
# Send things back in a nice data.table format
# By default this will be one column per request, let's make it a column of IDs and a column of Placekeys
dt <- t(as.data.table(output))
names(dt) <- c('query_id','placekey_id')
return(dt)
})
# Bind the results from each of our batches together
responses <- rbindlist(responses)
return(responses)
}
responses <- getPlacekeys(batch_payloads, headers)
respones
responses
responses <- lapply(batch_payloads,
function(x) {
json_body <- toJSON(x, auto_unbox = TRUE)
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
stop_for_status(res)
output <- content(res, "parsed", "application/json")
# Send things back in a nice data.table format
# By default this will be one column per request, let's make it a column of IDs and a column of Placekeys
dt <- t(as.data.table(output))
names(dt) <- c('query_id','placekey_id')
return(dt)
})
responses
getPlacekeys <- function(batch_payloads, headers) {
url <- 'https://api.placekey.io/v1/placekeys'
responses <- lapply(batch_payloads,
function(x) {
json_body <- toJSON(x, auto_unbox = TRUE)
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
stop_for_status(res)
output <- content(res, "parsed", "application/json")
# Send things back in a nice data.table format
# By default this will be one column per request, let's make it a column of IDs and a column of Placekeys
dt <- t(as.matrix(output))
dt <- as.data.table(dt)
names(dt) <- c('query_id','placekey_id')
return(dt)
})
# Bind the results from each of our batches together
responses <- rbindlist(responses)
return(responses)
}
responses <- getPlacekeys(batch_payloads, headers)
responses
responses <- lapply(batch_payloads,
function(x) {
json_body <- toJSON(x, auto_unbox = TRUE)
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
stop_for_status(res)
output <- content(res, "parsed", "application/json")
# Send things back in a nice data.table format
# By default this will be one column per request, let's make it a column of IDs and a column of Placekeys
dt <- t(as.matrix(output))
dt <- as.data.table(dt)
names(dt) <- c('query_id','placekey_id')
return(dt)
})
responses
responses <- lapply(batch_payloads,
function(x) {
json_body <- toJSON(x, auto_unbox = TRUE)
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
stop_for_status(res)
output <- content(res, "parsed", "application/json")
# Send things back in a nice data.table format
# By default this will be one column per request, let's make it a column of IDs and a column of Placekeys
dt <- t(as.data.frame(output))
dt <- as.data.table(dt)
names(dt) <- c('query_id','placekey_id')
return(dt)
})
responses <- lapply(batch_payloads,
function(x) {
json_body <- toJSON(x, auto_unbox = TRUE)
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
stop_for_status(res)
output <- content(res, "parsed", "application/json")
# Send things back in a nice data.table format
# By default this will be one column per request, let's make it a column of IDs and a column of Placekeys
dt <- t(as.data.table(output))
dt <- as.data.table(dt)
names(dt) <- c('query_id','placekey_id')
return(dt)
})
responses
# Bind the results from each of our batches together
responses <- rbindlist(responses)
responses
getPlacekeys <- function(batch_payloads, headers) {
url <- 'https://api.placekey.io/v1/placekeys'
responses <- lapply(batch_payloads,
function(x) {
json_body <- toJSON(x, auto_unbox = TRUE)
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
stop_for_status(res)
output <- content(res, "parsed", "application/json")
# Send things back in a nice data.table format
# By default this will be one column per request, let's make it a column of IDs and a column of Placekeys
dt <- t(as.data.table(output))
dt <- as.data.table(dt)
names(dt) <- c('query_id','placekey_id')
return(dt)
})
# Bind the results from each of our batches together
responses <- rbindlist(responses)
return(responses)
}
responses <- getPlacekeys(batch_payloads, headers)
responses
help(split)
payload <- orig_df[1:2]
# Add options and properly nest the payload
x <- list(queries = payload,
options = opts)
opts = list(strict_address_match = FALSE)
# Add options and properly nest the payload
x <- list(queries = payload,
options = opts)
# Convert to JSON
json_body <- toJSON(x, auto_unbox = TRUE)
# Make the request
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
# If there was a problem, explain why
stop_for_status(res)
# Get the responses
output <- content(res, "parsed", "application/json")
# Send things back in a nice data.table format
# By default this will be one column per request, let's make it a column of IDs and a column of Placekeys
dt <- t(as.data.table(output))
dt <- as.data.table(dt)
names(dt) <- c('query_id','placekey_id')
t
dt
short_dt <- orig_df[1:10]
getPlacekeys <- function(payload, headers, opts) {
url <- 'https://api.placekey.io/v1/placekeys'
# Add options and properly nest the payload
x <- list(queries = payload,
options = opts)
# Convert to JSON
json_body <- toJSON(x, auto_unbox = TRUE)
# Make the request
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
# If there was a problem, explain why
stop_for_status(res)
# Get the responses
output <- content(res, "parsed", "application/json")
# Send things back in a nice data.table format
# By default this will be one column per request, let's make it a column of IDs and a column of Placekeys
dt <- t(as.data.table(output))
dt <- as.data.table(dt)
names(dt) <- c('query_id','placekey_id')
return(dt)
}
short_dt[,getPlacekeys(., headers, opts), by = floor((1:10 - 1)/5)]
help(package='data.table')
short_dt[,getPlacekeys(.SD, headers, opts), by = floor((1:10 - 1)/5)]
split_dt <- split(short_dt, floor((1:10 - 1)/5))
split_dt
res <- lapply(split_dt, getPlacekeys, headers, opts)
res
res <- rbindlist(res)
res
opts
placekey_ids <- clean_df[, getPlacekeys(.SD, headers, opts),
by = floor((1:nrow(clean_df) - 1)/batch_size)]
clean_df <- copy(orig_df)
clean_df[1:3, postal_code := NA]
clean_df[4:6, `:=`(latitude = NA,
longitude = NA)]
placekey_ids <- clean_df[, getPlacekeys(.SD, headers, opts),
by = floor((1:nrow(clean_df) - 1)/batch_size)]
batch_size = 50
placekey_ids <- clean_df[, getPlacekeys(.SD, headers, opts),
by = floor((1:nrow(clean_df) - 1)/batch_size)]
batch_size = 5
placekey_ids <- short_dt[, getPlacekeys(.SD, headers, opts),
by = floor((1:nrow(short_dt) - 1)/batch_size)]
placekey_ids
short_dt
short_dt$latitude[1] <- NA
clean_df
placekey_ids <- short_dt[, getPlacekeys(.SD, headers, opts),
by = floor((1:nrow(short_dt) - 1)/batch_size)]
help(toJSON)
getPlacekeys <- function(payload, headers, opts) {
url <- 'https://api.placekey.io/v1/placekeys'
# Add options and properly nest the payload
x <- list(queries = payload,
options = opts)
# Convert to JSON
json_body <- toJSON(x,
auto_unbox = TRUE,
na = 'null')
# Make the request
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
# If there was a problem, explain why
stop_for_status(res)
# Get the responses
output <- content(res, "parsed", "application/json")
# Send things back in a nice data.table format
# By default this will be one column per request, let's make it a column of IDs and a column of Placekeys
dt <- t(as.data.table(output))
dt <- as.data.table(dt)
names(dt) <- c('query_id','placekey_id')
return(dt)
}
placekey_ids <- short_dt[, getPlacekeys(.SD, headers, opts),
by = floor((1:nrow(short_dt) - 1)/batch_size)]
placekey_ids
placekey_ids <- short_dt[, try(getPlacekeys(.SD, headers, opts)),
by = floor((1:nrow(short_dt) - 1)/batch_size)]
placekey_ids
getPlacekeys <- function(payload, headers, opts) {
url <- 'https://api.placekey.io/v1/placekeys'
# Add options and properly nest the payload
x <- list(queries = payload,
options = opts)
# Convert to JSON
json_body <- toJSON(x,
auto_unbox = TRUE)
# Make the request
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
# If there was a problem, explain why
stop_for_status(res)
# Get the responses
output <- content(res, "parsed", "application/json")
# Send things back in a nice data.table format
# By default this will be one column per request, let's make it a column of IDs and a column of Placekeys
dt <- t(as.data.table(output))
dt <- as.data.table(dt)
names(dt) <- c('query_id','placekey_id')
return(dt)
}
hort_dt
short_dt
placekey_ids <- short_dt[, try(getPlacekeys(.SD, headers, opts)),
by = floor((1:nrow(short_dt) - 1)/batch_size)]
placekey_ids
data.table(a)
data.table(c,d)
data.table()
help(except)
help(except)
help(try)
help("tryCatch")
help("stop_for_status")
m <- try(lklkn)
m
inherits(m,'try-error')
dt <- data.table()
dt[,a := ]
data.table(place = character(0))
trygetPlacekeys <- function(payload, headers, opts) {
gp <- try(getPlacekeys(payload, headers, opts))
if (inherits(gp, 'try-error')) {
return(data.table(query_id = character(0),
placekey_id = character(0)))
}
return(gp)
}
short_dt[,trygetPlacekeys(.SD, headers, opts), by = floor((1:10 - 1)/5)]
m <- try(2+2)
m
short_dt
sm_dt <- short_dt
sm_dt$latitude[1] <- 42
f <- sm_dt[,trygetPlacekeys(.SD, headers, opts), by = floor((1:10 - 1)/5)]
f
trygetPlacekeys <- function(payload, headers, opts) {
gp <- try(getPlacekeys(payload, headers, opts))
if (inherits(gp, 'try-error')) {
return(data.table(query_id = character(0),
placekey_id = character(0)))
}
print(class(gp))
print(sapply(gp, class))
return(gp)
}
f <- sm_dt[,trygetPlacekeys(.SD, headers, opts), by = floor((1:10 - 1)/5)]
getPlacekeys <- function(payload, headers, opts) {
url <- 'https://api.placekey.io/v1/placekeys'
# Add options and properly nest the payload
x <- list(queries = payload,
options = opts)
# Convert to JSON
json_body <- toJSON(x,
auto_unbox = TRUE)
# Make the request
res <- POST(url,
body = json_body,
encode = 'raw',
config = add_headers(.headers = headers))
# If there was a problem, explain why
stop_for_status(res)
# Get the responses
output <- content(res, "parsed", "application/json")
# Send things back in a nice data.table format
# By default this will be one column per request, let's make it a column of IDs and a column of Placekeys
dt <- t(as.data.table(output))
dt <- as.data.table(dt)
names(dt) <- c('query_id','placekey_id')
dt[, query_id := as.character(query_id)]
dt[, placekey_id := as.character(placekey_id)]
return(dt)
}
short_dt[,trygetPlacekeys(.SD, headers, opts), by = floor((1:10 - 1)/5)]
data.table(query_id = character(0),
placekey_id = character(0))
h <- short_dt[,trygetPlacekeys(.SD, headers, opts), by = floor((1:10 - 1)/5)]
setwd("C:/Users/nhuntington-klein/OneDrive/Contract/SafeGraph/absolute_numbers/SafeGraphAbsoluteNumbers")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, cache = FALSE)
library(SafeGraphR)
library(data.table)
library(magrittr)
library(ggplot2)
library(lubridate)
library(readxl)
library(stringr)
library(purrr)
library(ggpubr)
library(scales)
library(extrafont)
library(knitr)
library(kableExtra)
library(jtools)
# Load in NFL data and prep
nfl <- read_excel('football_games.xlsx') %>%
as.data.table()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, cache = FALSE)
library(SafeGraphR)
library(data.table)
library(magrittr)
library(ggplot2)
library(lubridate)
library(readxl)
library(stringr)
library(purrr)
library(ggpubr)
library(scales)
library(extrafont)
library(knitr)
library(kableExtra)
library(jtools)
# Load in NFL data and prep
nfl <- read_excel('football_games.xlsx') %>%
as.data.table()
nfl <- nfl[!(is.na(location_name))]
nfl[, Total := NULL]
nfl[, Home := NULL]
nfl[, Away := NULL]
nfl[, Tm := NULL]
setnames(nfl, 'Week 17 Data','Week 17 Date')
nms <- names(nfl)
nms <- nms[nms != 'location_name']
dts <- nms[str_sub(nms,-4) == 'Date']
cts <- nms[!(nms %in% dts)]
nfl <- melt(nfl, id.vars = c('location_name'), measure.vars = list(dts,cts))
nfl <- nfl[!is.na(value2)]
setnames(nfl, c('value1','value2'), c('date','count'))
nfl[,variable := NULL]
nfl[,date := as.Date(date)]
nfldata <- list.files(pattern = 'stadium') %>%
map(readRDS) %>%
rbindlist(fill = TRUE)
nfldata <- nfldata[!is.na(visits_by_day)]
load("C:/Users/nhuntington-klein/OneDrive/Contract/SafeGraph/absolute_numbers/stadium_2019-12-09_to_2019-12-31.Rdata")
load("C:/Users/nhuntington-klein/OneDrive/Contract/SafeGraph/absolute_numbers/stadium_locs.Rdata")
stad <- readRDS("C:/Users/nhuntington-klein/OneDrive/Contract/SafeGraph/absolute_numbers/stadium_locs.Rdata")
stad
stad[,N := .N, by = 'location_name']
stad[N>1]
